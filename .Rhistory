install.packages("clusterSim")
library(tidyr)
library(neuralnet)
library(clusterSim)
# Set working directory to data folder
setwd("~/GitHub/Project Data Files")
# Load .CSV files and convert to dataframes
assessments <- read.csv("assessments.csv")
courses <- read.csv("courses.csv")
std_assessments <- read.csv("studentAssessment.csv")
std_info <- read.csv("studentinfo.csv")
std_registration <- read.csv("studentRegistration.csv")
std_vle <- read.csv("studentVle.csv")
vle <- read.csv("vle.csv")
# Set Project working directory
setwd("~/GitHub/Feature-Engineering-Project")
# Create new data frame by combining Assessment data with Student Assessment data
combined_assessment <- merge(std_assessments, assessments, by = "id_assessment", all = TRUE)
# Isolate specific course to analyze
table(combined_assessment$code_module)
# Table indicates course "FFF" has highest number of rows at 54k
# Create assessment data from course FFF
FFF_Assessment <- subset(combined_assessment, code_module %in% "FFF")
# Create working data frame
df <- FFF_Assessment
## Begin Feature Engineering on assessment Data
# Create feature of time between assisgnemtn due date and time of actual submission
submission_time <- df$date - df$date_submitted
# Append new features to data frame
df1 <- data.frame(df,submission_time)
# Begin feature selection
df2 <- data.frame(df1$score, df1$assessment_type, df1$weight, df1$submission_time)
# Rename columns
names(df2) <- c("score","assessment_type","weight","submission_time")
# Check for missing values in data set
apply(df2,2,function(x) sum(is.na(x)))
# Remove rows with missing values
df3 <- na.omit(df2)
# confirm missing values are removed
apply(df3,2,function(x) sum(is.na(x)))
# Split data into training and test set at 3/4ths split then we fit a linear regression model and test it on the test set.
index <- sample(1:nrow(df3),round(0.75*nrow(df3)))
train <- df3[index,]
test <- df3[-index,]
lm.fit <- glm(score~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$score)^2)/nrow(test)
# Begin data preprocessing
View(df3)
df3 <- data.Normalization (df3,type="n1",normalization="score","weight","submission_time")
df4 <- df3.Normalization (df3,type="n1",normalization="score","weight","submission_time")
df4 <- data.Normalization (df3,type="n1",normalization="score","weight","submission_time")
df4 <- data.Normalization (df3,type="n1",normalization="score")
df3$score <- as.numeric(df3$score)
df3$weight <- as.numeric(df3$weight)
df3$submission_time <- as.numeric(df3$submission_time)
# Apply z-score normalization to numeric values in dataset
df4 <- data.Normalization (df3,type="n1",normalization="score")
df4 <- data.Normalization (df3,type="n1",normalization="score")
remove(df4)
df4 <- data.Normalization (df3,type="n1",normalization="score")
df4 <- data.Normalization (df3,type="n1",normalization="score")
remove(df4)
z_score <- (df3$score - mean(df3$score)) / sd(df3$score)
z_weight <- (df3$weight - mean(df3$weight)) / sd(df3$weight)
z_submisstion_time <- (df3$submission_time - mean(df3$submission_time)) / sd(df3$submission_time)
df4 <- data.frame(z_score, df3$assessment_type, z_weight, z_submission_time)
z_submission_time <- (df3$submission_time - mean(df3$submission_time)) / sd(df3$submission_time)
names(df4) <- c("score","assessment_type","weight","submission_time")
df4 <- data.frame(z_score, df3$assessment_type, z_weight, z_submission_time)
names(df4) <- c("score","assessment_type","weight","submission_time")
index <- sample(1:nrow(df4),round(0.75*nrow(df4)))
train <- df4[index,]
test <- df4[-index,]
lm.fit <- glm(score~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$score)^2)/nrow(test)
n <- names(train)
f <- as.formula(paste("score ~", paste(n[!n %in% "score"], collapse = " + ")))
nn <- neuralnet(f,data=train_,hidden=c(5,3),linear.output=T)
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
flags = data.frame(Reduce(cbind, lapply(levels(df4$assessment_type), function(x){(df4$assessment_type== x)*1})
flags <- data.frame(Reduce(cbind, lapply(levels(df4$assessment_type), function(x){(df4$assessment_type== x)*1})
flags = data.frame(Reduce(cbind, lapply(levels(df4$assessment_type), function(x){(df4$assessment_type== x)*1})))
df5 = cbind(df4, flags)
View(df5)
flags <- data.frame(Reduce(cbind, lapply(levels(df4$assessment_type), function(x){(df4$assessment_type== x)*1})))
df5 <- data.frame(df4$score, df4$weight,df4$submission_time, flags)
View(df4)
x = cbind(df4, flags)
head(x)
View(x)
table(df4$assessment_type)
names(df5) <- c("score","assessment_type","weight","submission_time","CMA","Exam","TMA")
names(df5) <- c("score","weight","submission_time","CMA","Exam","TMA")
index <- sample(1:nrow(df5),round(0.75*nrow(df5)))
train <- df5[index,]
test <- df5[-index,]
lm.fit <- glm(score~., data=train)
summary(lm.fit)
pr.lm <- predict(lm.fit,test)
MSE.lm <- sum((pr.lm - test$score)^2)/nrow(test)
# fit neural net
n <- names(train)
f <- as.formula(paste("score ~", paste(n[!n %in% "score"], collapse = " + ")))
nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=T)
nn <- neuralnet(f,data=train,hidden=c(3,2),linear.output=T)
nn <- neuralnet(f,data=train,hidden=1,linear.output=T)
plot(nn)
df_2014j <- subset(FFF_Assessment, code_presentation %in% "2014J")
student_101217 <- subset(df_2014j, id_student %in% "101217")
student_552173 <- subset(df_2014j, id_student %in% "552173")
student_655386 <- subset(df_2014j, id_student %in% "655386")
# Merge sample student data together
student_test_data <- rbind(student_655386,student_552173,student_101217)
combined_vle_assess <- merge(student_test_data, std_vle, by= c("id_student", "code_module","code_presentation"))
# Create new data frame by student vle information data with vle discription data
combined_std_vle_assess <- merge(combined_vle_assess, vle, by= c("id_site", "code_module","code_presentation"))
sample_student_data <- merge(combined_std_vle_assess, std_info, by= c("id_student", "code_module","code_presentation"))
sample_student_data <- subset(wd_data, select = -c(id_site, code_module, code_presentation) )
sample_student_data <- subset(sample_student_data, select = -c(id_site, code_module, code_presentation) )
str(student_test_data)
View(sample_student_data)
write.csv(sample_student_data)
write.csv(sample_student_data, file=file = "sample_student_data.csv")
write.csv(sample_student_data, file = "sample_student_data.csv")
library(tidyr)
sample_spread <- spread(sample_student_data)
sample_spread <- tidyr::spread(sample_student_data, assessment_type)
sample_spread <- tidyr::spread(sample_student_data, assessment_type, assessment_spread)
sample_spread <- tidyr::spread(sample_student_data, assessment_type, score)
sample_spread <- tidyr::spread(sample_student_data, id_student, assessment_type, score, date.x, activity_type)
sample_spread <- tidyr::spread(sample_student_data, c(id_student, assessment_type, score, date.x, activity_type))
View(std_assessments)
sample_data_gather <- tidyr::spread(sample_student_data, id_student, score, id_assessment)
unique_std_assessment <- unique(std_assessments)
unique_std_assessment <- unique(std_assessments$id_student)
unique_std_assessment
plot(student_test_data$score)
plot(student_test_data$assessment_type, student_test_data$score)
plot(student_test_data$code_module, student_test_data$score)
plot(sample_test_data$code_m, sample_test_data$score)
plot(sample_student_data$assessment_type, sample_student_data$score)
plot(sample_student_data$activity_type, sample_student_data$sum_click)
hist(sample_student_data$activity_type, sample_student_data$sum_click)
barplot(sample_student_data$activity_type, sample_student_data$sum_click)
barplot(, sample_student_data$sum_click, sample_student_data$activity_type)
plot(, sample_student_data$sum_click, sample_student_data$activity_type)
plot(sample_student_data$sum_click, sample_student_data$activity_type)
plot(sample_student_data$sum_click)
barplot(sample_student_data$sum_click)
scatter.smooth(sample_student_data$sum_click)
line(scatter.smooth(sample_student_data$sum_click))
View(FFF_Assessment)
library(dplyr)
testdf <- sample_student_data %>% dplyr::summarise(mean(score))
View(testdf)
testdf <- sample_student_data %>% dplyr::group_by(assessment_type)
View(testdf)
testdf <- sample_student_data %>% dplyr::group_by(assessment_type) %>% dplyr::summarise(mean(score))
testdf <- sample_student_data %>% dplyr::group_by(c(id_student, assessment_type) %>% dplyr::summarise(mean(score))
testdf <- sample_student_data %>% dplyr::group_by(id_student, assessment_type %>% dplyr::summarise(mean(score))
testdf <- sample_student_data %>% dplyr::group_by(assessment_type) %>% dplyr::summarise(mean(score))
testdf <- sample_student_data %>% dplyr::group_by(assessment_type, id_student) %>% dplyr::summarise(mean(score))
View(testdf)
assessment_score_mean <- sample_student_data %>% dplyr::group_by(assessment_type, id_student) %>% dplyr::summarise(mean(score))
activity_type_sum_click <- sample_student_data %>% dplyr::group_by(activity_type, id_student) %>% dplyr::summarise(mean(sum_click))
View(activity_type_sum_click)
plot(activity_type_sum_click$`mean(sum_click)`)
plot(activity_type_sum_click$activity_type, activity_type_sum_click$`mean(sum_click)`)
barplot(activity_type_sum_click$activity_type, activity_type_sum_click$`mean(sum_click)`)
hist(activity_type_sum_click$activity_type, activity_type_sum_click$`mean(sum_click)`)
scatter.smooth(activity_type_sum_click$activity_type, activity_type_sum_click$`mean(sum_click)`)
plot(activity_type_sum_click$activity_type, activity_type_sum_click$`mean(sum_click)`)
plot(activity_type_sum_click$id_student, activity_type_sum_click$`mean(sum_click)`)
as.factor(activity_type_sum_click$id_student)
plot(activity_type_sum_click$id_student, activity_type_sum_click$`mean(sum_click)`)
activity_type_sum_click$id_student <- as.factor(activity_type_sum_click$id_student)
plot(activity_type_sum_click$id_student, activity_type_sum_click$`mean(sum_click)`)
plot(activity_type_sum_click$id_student, activity_type_sum_click$`mean(sum_click)`)
as.factor(activity_type_sum_click$id_student)
?merge()
tidyr::spread(assessment_score_mean, id_student)
tidyr::spread(assessment_score_mean, id_student, exam_average)
View(assessment_score_mean)
tidyr::spread(assessment_score_mean, id_student, 'mean(score)')
tidyr::spread(assessment_score_mean, assessment_type, 'mean(score)')
spread_assessment_mean <- tidyr::spread(assessment_score_mean, assessment_type, 'mean(score)')
View(spread_assessment_mean)
spread_avg_click <- tidyr::spread(activity_type_sum_click, activity_type, 'mean(sum_click)')
View(spread_avg_click)
plot(spread_avg_click$id_student)
plot(spread_avg_click)
plot(spread_avg_click$dataplus)
plot(spread_avg_click$homepage)
